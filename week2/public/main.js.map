{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/components/editor/editor.component.css","webpack:///./src/app/components/editor/editor.component.html","webpack:///./src/app/components/editor/editor.component.ts","webpack:///./src/app/components/new-problem/new-problem.component.css","webpack:///./src/app/components/new-problem/new-problem.component.html","webpack:///./src/app/components/new-problem/new-problem.component.ts","webpack:///./src/app/components/problem-detail/problem-detail.component.css","webpack:///./src/app/components/problem-detail/problem-detail.component.html","webpack:///./src/app/components/problem-detail/problem-detail.component.ts","webpack:///./src/app/components/problem-list/problem-list.component.css","webpack:///./src/app/components/problem-list/problem-list.component.html","webpack:///./src/app/components/problem-list/problem-list.component.ts","webpack:///./src/app/services/collaboration.service.ts","webpack:///./src/app/services/data.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAAE;AACF;AACA,4CAA4C,WAAW;AACvD;AACA;AACA,4E;;;;;;;;;;;ACZA,mB;;;;;;;;;;;ACAA,wG;;;;;;;;;;;;;;;;;;;;;ACA0C;AAO1C;IALA;QAME,UAAK,GAAG,WAAW,CAAC;IACtB,CAAC;IAFY,YAAY;QALxB,+DAAS,CAAC;YACT,QAAQ,EAAE,UAAU;;;SAGrB,CAAC;OACW,YAAY,CAExB;IAAD,mBAAC;CAAA;AAFwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACPiC;AACjB;AACG;AACY;AAET;AACyC;AACM;AACT;AAE9C;AACgC;AAoBvE;IAAA;IAAyB,CAAC;IAAb,SAAS;QAjBrB,8DAAQ,CAAC;YACR,YAAY,EAAE;gBACZ,2DAAY;gBACZ,oGAAoB;gBACpB,0GAAsB;gBACtB,iGAAmB;gBACnB,mFAAe;aAChB;YACD,OAAO,EAAE;gBACP,uEAAa;gBACb,mDAAO;gBACP,0DAAW;gBACX,qEAAgB;aACjB;YACD,SAAS,EAAE,EAAE;YACb,SAAS,EAAE,CAAC,2DAAY,CAAC;SAC1B,CAAC;OACW,SAAS,CAAI;IAAD,gBAAC;CAAA;AAAJ;;;;;;;;;;;;;AC/BtB;AAAA;AAAA;AAAA;AAAA;AAAuD;AACiC;AACM;AAG9F,IAAM,MAAM,GAAW;IACrB;QACE,IAAI,EAAE,EAAE;QACR,UAAU,EAAE,UAAU;QACtB,SAAS,EAAE,MAAM,CAAC,gBAAgB;KACnC;IACD;QACE,IAAI,EAAE,UAAU;QAChB,SAAS,EAAE,oGAAoB;KAChC;IACD;QACE,IAAI,EAAE,cAAc;QACpB,SAAS,EAAE,0GAAsB;KAClC;IACD;QACE,IAAI,EAAE,IAAI;QACV,UAAU,EAAE,UAAU;KACvB;CACF,CAAC;AAGK,IAAM,OAAO,GAAG,4DAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;;;;;;;;;;;;AC1BpD,iCAAiC,YAAY,mBAAmB,IAAI,mBAAmB,kBAAkB,wBAAwB,IAAI,kBAAkB,mBAAmB,IAAI,kBAAkB,mBAAmB,IAAI,qCAAqC,oBAAoB,IAAI,cAAc,yBAAyB,wCAAwC,iBAAiB,4BAA4B,EAAE,C;;;;;;;;;;;ACAlZ,6TAA6T,UAAU,0wBAA0wB,qpB;;;;;;;;;;;;;;;;;;;;;;;;;;ACA/hC;AACyB;AAClB;AASzD;IAmBE,8BAA8B;IAC9B,yBAAoB,aAAmC,EACjC,KAAqB;QADvB,kBAAa,GAAb,aAAa,CAAsB;QACjC,UAAK,GAAL,KAAK,CAAgB;QAnBpC,cAAS,GAAa,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;QAChD,aAAQ,GAAW,MAAM,CAAC;QAE1B,mBAAc,GAAG;YAChB,MAAM,EAAE,2JAKP;YACD,QAAQ,EAAE,0GAEuC;SACjD,CAAC,CAAE,iCAAiC;IAMU,CAAC;IAEhD,kCAAQ,GAAR;QACC,iCAAiC;QACjC,8BAA8B;QAC9B,gCAAgC;QAChC,oCAAoC;QACpC,6CAA6C;QAL9C,iBAcC;QAPC,8BAA8B;QAC9B,gEAAgE;QAChE,0DAA0D;QAC1D,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAE,gBAAM;YACjC,KAAI,CAAC,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YAC9B,KAAI,CAAC,UAAU,EAAE,CAAC;QACpB,CAAC,CAAC,CAAC;IACL,CAAC;IAED,oCAAU,GAAV;QAAA,iBAoBC;QAnBC,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACjC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;QAC1C,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,QAAQ,CAAC,oBAAoB,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,EAAE,CAAC;QAErD,8BAA8B;QAC9B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;QAErD,IAAI,CAAC,MAAM,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAErC,2BAA2B;QAC3B,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAC,CAAC;YACzB,OAAO,CAAC,GAAG,CAAC,kBAAkB,GAAG,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YACpD,8CAA8C;YAC9C,yCAAyC;YACzC,IAAI,KAAI,CAAC,MAAM,CAAC,iBAAiB,IAAI,CAAC,EAAE;gBACtC,KAAI,CAAC,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;aAC9C;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,qCAAW,GAAX;QACE,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,WAAW,EAAE,CAAC,CAAC;QAC5E,eAAe;QACf,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;IAC3D,CAAC;IAED,qCAAW,GAAX,UAAY,QAAgB;QAC1B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,gCAAM,GAAN;QACE,IAAI,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC;QACtC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IACxB,CAAC;IA3EU,eAAe;QAL3B,+DAAS,CAAC;YACT,QAAQ,EAAE,YAAY;;;SAGvB,CAAC;yCAqBmC,oFAAoB;YAC1B,8DAAc;OArBhC,eAAe,CA6E3B;IAAD,sBAAC;CAAA;AA7E2B;;;;;;;;;;;;ACX5B,mB;;;;;;;;;;;ACAA,y3BAAy3B,YAAY,2S;;;;;;;;;;;;;;;;;;;;;;;;;ACAn1B;AAEQ;AAG1D,kBAAkB;AAClB,IAAM,eAAe,GAAY,MAAM,CAAC,MAAM,CAAC;IAC9C,EAAE,EAAE,CAAC;IACL,IAAI,EAAE,EAAE;IACR,IAAI,EAAE,EAAE;IACR,UAAU,EAAE,MAAM;CAClB,CAAC;AAOF;IAKE,sBAAsB;IACtB,6BAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;QAJ5C,eAAU,GAAY,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC;QACzD,iBAAY,GAAa,CAAC,MAAM,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;IAGb,CAAC;IAEjD,sCAAQ,GAAR;IACA,CAAC;IAED,wCAAU,GAAV;QACC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QAC7C,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,EAAE,eAAe,CAAC,CAAC;IACtD,CAAC;IAdU,mBAAmB;QAL/B,+DAAS,CAAC;YACT,QAAQ,EAAE,iBAAiB;;;SAG5B,CAAC;yCAOiC,kEAAW;OANjC,mBAAmB,CAgB/B;IAAD,0BAAC;CAAA;AAhB+B;;;;;;;;;;;;AClBhC,mB;;;;;;;;;;;ACAA,qOAAqO,YAAY,IAAI,cAAc,0CAA0C,cAAc,kK;;;;;;;;;;;;;;;;;;;;;;;;;;ACAzQ;AACM;AAEE;AAO1D;IAIE,gCAAoB,WAAwB,EAC/B,KAAqB;QADd,gBAAW,GAAX,WAAW,CAAa;QAC/B,UAAK,GAAL,KAAK,CAAgB;IAAI,CAAC;IAEvC,yCAAQ,GAAR;QAAA,iBAWC;QAVA,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,SAAS,CAAC,gBAAM;YACjC,4DAA4D;YAC1D,mCAAmC;YACnC,KAAI,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACvC,IAAI,CAAC,iBAAO,IAAI,YAAI,CAAC,OAAO,GAAG,OAAO,EAAtB,CAAsB,CAAC,CAAC;YACzC,6BAA6B;YAC7B,sCAAsC;YACtC,qCAAqC;QAC1C,CAAC,CAAC,CAAC;IAEJ,CAAC;IAlBU,sBAAsB;QALlC,+DAAS,CAAC;YACT,QAAQ,EAAE,oBAAoB;;;SAG/B,CAAC;yCAKiC,kEAAW;YACxB,8DAAc;OALvB,sBAAsB,CAoBlC;IAAD,6BAAC;CAAA;AApBkC;;;;;;;;;;;;ACVnC,8BAA8B,oBAAoB,uBAAuB,GAAG,qBAAqB,uBAAuB,mBAAmB,oBAAoB,GAAG,UAAU,qBAAqB,GAAG,cAAc,8BAA8B,GAAG,gBAAgB,8BAA8B,GAAG,cAAc,8BAA8B,GAAG,cAAc,8BAA8B,GAAG,C;;;;;;;;;;;ACAlY,iQAAiQ,6EAA6E,eAAe,oBAAoB,iDAAiD,YAAY,IAAI,cAAc,8C;;;;;;;;;;;;;;;;;;;;;;;;;ACAnY;AAEH;AAU1D;IAKE,8BAAoB,WAAwB;QAAxB,gBAAW,GAAX,WAAW,CAAa;IAAI,CAAC;IAEjD,oCAAoC;IACpC,uCAAQ,GAAR;QACE,IAAI,CAAC,WAAW,EAAE,CAAC;IACrB,CAAC;IAED,0CAAW,GAAX;QACE,IAAI,CAAC,oBAAoB,CAAC,WAAW,EAAE,CAAC;IAC1C,CAAC;IAED,0CAAW,GAAX;QAAA,iBAKC;QAJA,iDAAiD;QAChD,IAAI,CAAC,oBAAoB,GAAG,IAAI,CAAC,WAAW,CAAC,WAAW,EAAE;aACvD,SAAS,CAAC,kBAAQ,IAAI,YAAI,CAAC,QAAQ,GAAG,QAAQ,EAAxB,CAAwB,CAAC,CAAC;QACjD,wDAAwD;IAC5D,CAAC;IArBU,oBAAoB;QALhC,+DAAS,CAAC;YACT,QAAQ,EAAE,kBAAkB;;;SAG7B,CAAC;yCAMiC,kEAAW;OALjC,oBAAoB,CAwBhC;IAAD,2BAAC;CAAA;AAxBgC;;;;;;;;;;;;;;;;;;;;;;;;;ACZU;AAM3C;IAGE;IAAgB,CAAC;IAEjB,mCAAI,GAAJ,UAAK,MAAW,EAAE,SAAiB;QAClC,kEAAkE;QAClE,mDAAmD;QACnD,4DAA4D;QAC5D,0BAA0B;QAC1B,IAAI,CAAC,mBAAmB,GAAG,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,EAAE;YACrD,KAAK,EAAE,YAAY,GAAG,SAAS;SAAC,CAAC,CAAC;QACnC,4BAA4B;QAC5B,4DAA4D;QAC5D,sCAAsC;QACrC,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,QAAQ,EAAE,UAAC,KAAa;YACpD,OAAO,CAAC,GAAG,CAAC,+BAA+B,GAAG,KAAK,CAAC,CAAC;YACnD,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,0BAA0B;YACrD,MAAM,CAAC,iBAAiB,GAAG,KAAK,CAAC;YACjC,MAAM,CAAC,UAAU,EAAE,CAAC,WAAW,EAAE,CAAC,WAAW,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;QAC1D,CAAC,CAAC,CAAC;IACJ,CAAC;IAED,uEAAuE;IACvE,qCAAM,GAAN,UAAO,KAAa;QAClB,sBAAsB;QACtB,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;IACjD,CAAC;IA3BU,oBAAoB;QAHhC,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;;OACW,oBAAoB,CA4BhC;IAAD,2BAAC;CAAA;AA5BgC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNU;AAE3C,8CAA8C;AAC+B;AAEtC;AAKvC;IAWE,qBAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAT1C,mBAAmB;QACnB,iCAAiC;QAEjC,6BAA6B;QAC7B,gFAAgF;QAChF,mEAAmE;QACnE,2EAA2E;QACnE,mBAAc,GAAG,IAAI,oDAAe,CAAY,EAAE,CAAC,CAAC;IAEd,CAAC;IAE/C,4BAA4B;IAC5B,iCAAW,GAAX;QAAA,iBASC;QARC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,iBAAiB,CAAC;aACnC,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,GAAQ;YACb,mBAAmB;YACnB,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;QAChC,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;QAC5B,OAAO,IAAI,CAAC,cAAc,CAAC,YAAY,EAAE,CAAC;IAC3C,CAAC;IAED,YAAY;IACZ,yBAAyB;IACzB,gCAAU,GAAV,UAAW,EAAU;QACnB,0DAA0D;QAC3D,qCAAqC;QACrC,2BAA2B;QAC3B,sBAAsB;QACtB,MAAM;QACN,IAAI;QACH,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,qBAAmB,EAAI,CAAC;aAChD,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,GAAQ,IAAK,UAAG,EAAH,CAAG,CAAC,CAAE,wBAAwB;aACjD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAED,oBAAoB;IACpB,gCAAU,GAAV,UAAW,OAAgB;QACzB,oBAAoB;QACpB,yCAAyC;QACzC,kCAAkC;QAClC,+BAA+B;QAJjC,iBAiBC;QAXC,mCAAmC;QACnC,IAAM,OAAO,GAAG,EAAE,OAAO,EAAE,IAAI,gEAAW,CAAC,EAAC,cAAc,EAAE,kBAAkB,EAAC,CAAC,EAAC,CAAC;QAClF,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,iBAAiB,EAAE,OAAO,EAAE,OAAO,CAAC;aAC7D,SAAS,EAAE;aACX,IAAI,CAAC,UAAC,GAAQ;YACb,cAAc;YACd,4BAA4B;YAC5B,KAAI,CAAC,WAAW,EAAE,CAAC;YACnB,OAAO,GAAG,CAAC;QACb,CAAC,CAAC;aACD,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;IAC7B,CAAC;IAEO,iCAAW,GAAnB,UAAoB,KAAU;QAC5B,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,IAAI,KAAK,CAAC,CAAC;IAC7C,CAAC;IA9DU,WAAW;QAHvB,gEAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;yCAYgC,+DAAU;OAX/B,WAAW,CAgEvB;IAAD,kBAAC;CAAA;AAhEuB;;;;;;;;;;;;;ACVxB;AAAA;AAAA,gFAAgF;AAChF,0EAA0E;AAC1E,gEAAgE;AAEzD,IAAM,WAAW,GAAG;IACzB,UAAU,EAAE,KAAK;CAClB,CAAC;AAEF;;;;;;GAMG;AACH,mEAAmE;;;;;;;;;;;;;ACfnE;AAAA;AAAA;AAAA;AAAA;AAA+C;AAC4B;AAE9B;AACY;AAEzD,IAAI,qEAAW,CAAC,UAAU,EAAE;IAC1B,oEAAc,EAAE,CAAC;CAClB;AAED,gGAAsB,EAAE,CAAC,eAAe,CAAC,yDAAS,CAAC;KAChD,KAAK,CAAC,aAAG,IAAI,cAAO,CAAC,KAAK,CAAC,GAAG,CAAC,EAAlB,CAAkB,CAAC,CAAC","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!-- <app-problem-list></app-problem-list> -->\\n\\n<router-outlet></router-outlet>\\n\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'oj-client';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule} from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppComponent } from './app.component';\nimport { ProblemListComponent } from './components/problem-list/problem-list.component';\nimport { ProblemDetailComponent } from './components/problem-detail/problem-detail.component';\nimport { NewProblemComponent } from './components/new-problem/new-problem.component';\n\nimport { routing } from './app.routes';\nimport { EditorComponent } from './components/editor/editor.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    ProblemListComponent,\n    ProblemDetailComponent,\n    NewProblemComponent,\n    EditorComponent\n  ],\n  imports: [\n    BrowserModule,\n    routing,\n    FormsModule,\n    HttpClientModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes, RouterModule } from '@angular/router';\nimport { ProblemListComponent } from './components/problem-list/problem-list.component';\nimport { ProblemDetailComponent } from './components/problem-detail/problem-detail.component';\n\n\nconst routes: Routes = [\n  {\n    path: '',\n    redirectTo: 'problems',\n    pathMatch: 'full' // exactly match\n  },\n  {\n    path: 'problems',\n    component: ProblemListComponent\n  },\n  {\n    path: 'problems/:id', //id is a parameter eg problems/1\n    component: ProblemDetailComponent\n  },\n  {\n    path: '**',  // any other routes redirect to 'problems'\n    redirectTo: 'problems'\n  }\n];\n\n\nexport const routing = RouterModule.forRoot(routes);\n","module.exports = \"@media screen {\\n #editor {\\n   height: 600px;\\n }\\n   .lang-select {\\n   width: 100px;\\n   margin-right: 10px;\\n }\\n   header .btn {\\n   margin: 0 5px;\\n }\\n   footer .btn {\\n   margin: 0 5px;\\n }\\n   .editor-footer, .editor-header {\\n   margin: 10px 0;\\n }\\n   .cursor {\\n   /*position:absolute;*/\\n   background: rgba(0, 250, 0, 0.5);\\n   z-index: 40;\\n   width: 2px!important\\n} }\"","module.exports = \"<section>\\n\\t<header class=\\\"editor-header\\\">\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<select class=\\\"form-control pull-left lang-select\\\" name=\\\"language\\\" [(ngModel)]=\\\"language\\\" (change)=\\\"setLanguage(language)\\\">\\n\\t\\t\\t\\t<option *ngFor=\\\"let language of languages\\\" [value]=\\\"language\\\">\\n\\t\\t\\t\\t\\t{{language}}\\n\\t\\t\\t\\t</option>\\n\\t\\t\\t</select>\\n\\t\\t\\t<!-- reset button -->\\n\\t\\t\\t<!-- Button trigger modal -->\\n\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-toggle=\\\"modal\\\" data-target=\\\"#myModal\\\">\\n\\t\\t\\t\\tReset\\n\\t\\t\\t</button>\\n\\n\\t\\t\\t<!-- Modal -->\\n\\t\\t\\t<div class=\\\"modal fade\\\" id=\\\"myModal\\\" tabindex=\\\"-1\\\" role=\\\"dialog\\\" aria-labelledby=\\\"exampleModalLabel\\\" aria-hidden=\\\"true\\\">\\n\\t\\t\\t\\t<div class=\\\"modal-dialog\\\" role=\\\"document\\\">\\n\\t\\t\\t\\t\\t<div class=\\\"modal-content\\\">\\n\\t\\t\\t\\t\\t\\t<div class=\\\"modal-header\\\">\\n\\t\\t\\t\\t\\t\\t\\t<h5 class=\\\"modal-title\\\" id=\\\"exampleModalLabel\\\">Are you sure</h5>\\n\\t\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\" aria-label=\\\"close\\\">\\n\\t\\t\\t\\t\\t\\t\\t\\t<span aria-hidden=\\\"true\\\">&times;</span>\\n\\t\\t\\t\\t\\t\\t\\t</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t\\t<div class=\\\"modal-footer\\\">\\n\\t\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-secondary\\\" data-dismiss=\\\"modal\\\">Cancel</button>\\n\\t\\t\\t\\t\\t\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-primary\\\" data-dismiss=\\\"modal\\\" (click)=\\\"resetEditor()\\\">Reset</button>\\n\\t\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t\\t</div>\\n\\t\\t\\t\\t</div>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</header>\\n\\n\\t<div id=\\\"editor\\\">\\n\\t</div> <!-- This is the body -->\\n\\n\\t<footer class=\\\"editor-footer\\\">\\n\\t\\t<button type=\\\"button\\\" class=\\\"btn btn-success pull-right\\\" (click)=\\\"submit()\\\">Submit Solution</button>\\n\\t</footer>\\n</section>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { CollaborationService} from '../../services/collaboration.service';\nimport { ActivatedRoute, Params } from '@angular/router';\n// we must declare ace, since ace is not wroten by typescript, use type any\ndeclare var ace: any;\n\n@Component({\n  selector: 'app-editor',\n  templateUrl: './editor.component.html',\n  styleUrls: ['./editor.component.css']\n})\nexport class EditorComponent implements OnInit {\n  editor: any;\n  public languages: string[] = ['Java', 'Python'];\n  language: string = 'Java';\n\n  defaultContent = {\n  \t'Java': `public class Example {\n  \t\t        public static void main(String[] args) {\n  \t\t        \t// Type your Java code here\n  \t\t        }\n  \t}\n  \t`,\n  \t'Python': `class Solution:\n  \t               def example():\n  \t                   # write your Python code here`\n  };  //use `` to write multi-line text\n\n  sessionId: string;\n\n  // inject CollaborationService\n  constructor(private collaboration: CollaborationService,\n                private route: ActivatedRoute) { }\n\n  ngOnInit() {\n   //  // init collaboration service\n   //  this.collaboration.init();\n  \t// // \"editor\" is the id in html\n  \t// this.editor = ace.edit(\"editor\");\n  \t// this.editor.setTheme(\"ace/theme/eclipse\");\n\n    //use problem id as session id\n    // since we subscribe the changes, every time the params changes\n    // sessionId will be updated and editor will be initilized\n    this.route.params.subscribe( params => {\n      this.sessionId = params['id'];\n      this.initEditor();\n    });\n  }\n\n  initEditor(): void {\n    this.editor = ace.edit(\"editor\");\n    this.editor.setTheme(\"ace/theme/eclipes\");\n    this.resetEditor();\n    document.getElementsByTagName('textarea')[0].focus();\n\n    // set up collaboration socket\n    this.collaboration.init(this.editor, this.sessionId);\n\n    this.editor.lastAppliedChange = null;\n\n    // register change callback\n    this.editor.on(\"change\", (e) => {\n      console.log('editor changes: ' + JSON.stringify(e));\n      // check if the change is same as last change,\n      // if they are the same, skip this change\n      if (this.editor.lastAppliedChange != e) {\n        this.collaboration.change(JSON.stringify(e));\n      }\n    });\n  }\n\n  resetEditor(): void {\n    this.editor.getSession().setMode(\"ace/mode/\" + this.language.toLowerCase());\n    // set the java\n    this.editor.setValue(this.defaultContent[this.language]);\n  }\n\n  setLanguage(language: string): void {\n    this.language = language;\n    this.resetEditor();\n  }\n\n  submit(): void {\n    let usercode = this.editor.getValue();\n    console.log(usercode);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<div>\\n\\t<form #formRef=\\\"ngForm\\\">\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label for=\\\"problemName\\\">Problem Name</label>\\n\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"problemName\\\" name=\\\"problemName\\\" placeholder=\\\"Input problem name\\\" required [(ngModel)]=\\\"newProblem.name\\\">\\n\\t\\t</div>\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label for=\\\"problemDesc\\\">Problem Description</label>\\n\\t\\t\\t<input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"problemDesc\\\" name=\\\"problemDesc\\\" placeholder=\\\"Input description\\\" required [(ngModel)]=\\\"newProblem.desc\\\">\\n\\t\\t</div>\\n\\t\\t<div class=\\\"form-group\\\">\\n\\t\\t\\t<label for=\\\"difficulty\\\">Difficulty</label>\\n\\t\\t\\t<select class=\\\"form-control\\\" id=\\\"difficulty\\\" name=\\\"difficulty\\\" [(ngModel)]=\\\"newProblem.difficulty\\\">\\n\\t\\t\\t\\t<option *ngFor=\\\"let difficulty of difficulties\\\" [value]=\\\"difficulty\\\">\\n\\t\\t\\t\\t\\t{{difficulty}}\\n\\t\\t\\t\\t</option>\\n\\t\\t\\t</select>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"row\\\">\\n\\t\\t\\t<div class=\\\"col-md-12\\\">\\n\\t\\t\\t\\t<button type=\\\"submit\\\" class=\\\"btn btn-primary pull-right\\\"\\n\\t\\t\\t\\t  (click)=\\\"addProblem()\\\">Add problem</button>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t</form>\\n</div>\\n<br/>\\n<br/>\\n\\n\\n\"","import { Component, OnInit } from '@angular/core';\nimport { Problem } from '../../model/problem.model';\nimport { DataService } from '../../services/data.service';\n\n\n// default problem\nconst DEFAULT_PROBLEM: Problem = Object.freeze({\n\tid: 0,\n\tname: '',\n\tdesc: '',\n\tdifficulty: 'easy'\n})\n\n@Component({\n  selector: 'app-new-problem',\n  templateUrl: './new-problem.component.html',\n  styleUrls: ['./new-problem.component.css']\n})\nexport class NewProblemComponent implements OnInit {\n\n  newProblem: Problem = Object.assign({}, DEFAULT_PROBLEM);\n  difficulties: string[] = ['easy', 'medium', 'hard', 'super'];\n\n  // inject data service\n  constructor(private dataService: DataService) { }\n\n  ngOnInit() {\n  }\n\n  addProblem(){\n  \tthis.dataService.addProblem(this.newProblem);\n  \tthis.newProblem = Object.assign({}, DEFAULT_PROBLEM);\n  }\n  \n}\n","module.exports = \"\"","module.exports = \"<!-- *ngIf: only show the problem when problem is not null -->\\n<div class=\\\"container\\\" *ngIf=\\\"problem\\\">\\n\\t<div class=\\\"row\\\">\\n\\t\\t<div class=\\\"col-sm-12 col-md-4\\\">\\n\\t\\t\\t<div>\\n\\t\\t\\t\\t<h2>\\n\\t\\t\\t\\t\\t{{problem.id}}. {{problem.name}}\\n\\t\\t\\t\\t</h2>\\n\\t\\t\\t\\t<p>\\n\\t\\t\\t\\t\\t{{problem.desc}}\\n\\t\\t\\t\\t</p>\\n\\t\\t\\t</div>\\n\\t\\t</div>\\n\\t\\t<div class=\\\"hidden-xs col-sm-12 col-md-8\\\">\\n\\t\\t\\t<app-editor></app-editor>\\n\\t\\t</div>\\n\\t\\t\\n\\t</div>\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Params } from '@angular/router'\nimport { Problem } from '../../model/problem.model';\nimport { DataService } from '../../services/data.service';\n\n@Component({\n  selector: 'app-problem-detail',\n  templateUrl: './problem-detail.component.html',\n  styleUrls: ['./problem-detail.component.css']\n})\nexport class ProblemDetailComponent implements OnInit {\n\n  problem : Problem;\n\n  constructor(private dataService: DataService,\n  \t\t\t  private route: ActivatedRoute) { }\n\n  ngOnInit() {\n  \tthis.route.params.subscribe(params => {\n  \t\t//this.problem = this.dataService.getProblem(+params['id']);\n      // getProblem(id) returns a Promise\n      this.dataService.getProblem(+params['id'])\n        .then(problem => this.problem = problem);\n        //getProblem return a promise\n        //problem is the returned data source.\n        //this.problem is your local problem.\n  \t});\n  \t\n  }\n\n}\n","module.exports = \".difficult {\\n  min-width: 65px;\\n  margin-right: 18px;\\n}\\n.badge.difficulty {\\n  padding-top: 0.6em;\\n  color: #fbfdfa;\\n  font-size: 12px;\\n}\\n.title {\\n  font-size: 1.2em;\\n}\\n.diff-easy {\\n  background-color: #42ebf4;\\n}\\n.diff-medium {\\n  background-color: #92cf5c;\\n}\\n.diff-hard {\\n  background-color: #dd0d1e;\\n}\\n.diff-super{\\n  background-color: #8d16e2;\\n}\"","module.exports = \"<div class=\\\"container\\\">\\n\\t<app-new-problem></app-new-problem>\\n\\t<div class=\\\"list-group\\\">\\n\\t\\t<a class=\\\"list-group-item\\\" *ngFor=\\\"let problem of problems\\\"\\n\\t\\t   [routerLink]=\\\"['/problems', problem.id]\\\">\\n\\t\\t\\t<span class=\\\"{{'pull-left badge difficulty diff-' + problem.difficulty.toLocaleLowerCase()}}\\\">\\n\\t\\t\\t\\t{{problem.difficulty}}\\n\\t\\t\\t</span>\\n\\t\\t\\t<strong class=\\\"title\\\">{{problem.id}}. {{problem.name}}</strong>\\n\\t\\t</a>\\n\\t</div>\\n</div>\\n\\n\\n\\n\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Problem } from '../../model/problem.model';\nimport { DataService } from '../../services/data.service';\n\nimport { Subscription } from 'rxjs';\n\n\n@Component({\n  selector: 'app-problem-list',\n  templateUrl: './problem-list.component.html',\n  styleUrls: ['./problem-list.component.css']\n})\nexport class ProblemListComponent implements OnInit {\n  \n  problems: Problem[];\n  subscriptionProblems: Subscription;\n\n  constructor(private dataService: DataService) { }\n\n  // initialize problems in this class\n  ngOnInit() {\n    this.getProblems();\n  }\n\n  ngOnDestroy() {\n    this.subscriptionProblems.unsubscribe();\n  }\n  \n  getProblems() {\n  \t//this.problems = this.dataService.getProblems();\n    this.subscriptionProblems = this.dataService.getProblems()\n      .subscribe(problems => this.problems = problems);\n      //getProblems() return observable. need to subscribe it.\n  }\n  \n\n}\n","import { Injectable } from '@angular/core';\ndeclare var io: any;  // io is already imported in .angular.cli.json\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class CollaborationService {\n  collaborationSocket: any;\n\n  constructor() { }\n\n  init(editor: any, sessionId: string): void {\n  \t// window.location.origin: the server location on the current page\n  \t// for example, the current page on the browser is \n  \t// \"localhost:3000/problems/1\", the window.location.origin =\n  \t// \"http://localhost:3000\"\n  \tthis.collaborationSocket = io(window.location.origin, {\n  \t\tquery: 'sessionId=' + sessionId});\n  \t/// wait for 'message' event\n  \t/// when receive the message, for now just print the message\n  \t// handle the changes send from server\n    this.collaborationSocket.on('change', (delta: string) => {\n  \t\tconsole.log('collabration: editor changes ' + delta);\n      delta = JSON.parse(delta); // delta is in josn format\n      editor.lastAppliedChange = delta;\n      editor.getSession().getDocument().applyDeltas([delta]);\n  \t});\n  }\n\n  // emit event to make changes and inform server and other collaborators\n  change(delta: string): void {\n    // emit \"change\" event\n    this.collaborationSocket.emit(\"change\", delta);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Problem } from '../model/problem.model';\n//import { PROBLEMS } from '../mock-problems';\nimport { HttpClient, HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { BehaviorSubject } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n\n  // list of problems\n  //problems: Problem[] = PROBLEMS;\n\n  // private field start with _\n  // BehaviorSubject: when subscribe, we can get the value that emitted last time.\n  // Subject: when subscribe, we can only get the value that emitted \n  // after subscribe and we cannot get value that emitted before we subscribe\n  private _problemSource = new BehaviorSubject<Problem[]>([]);\n\n  constructor(private httpClient: HttpClient) { }\n\n  // return a list of problems\n  getProblems(): Observable<Problem[]> {\n    this.httpClient.get('api/v1/problems')\n      .toPromise()\n      .then((res: any) => {\n        // .next: next data\n        this._problemSource.next(res);\n      })\n      .catch(this.handleError);\n  \treturn this._problemSource.asObservable();\n  }\n\n  // input: id\n  // return a problem by id\n  getProblem(id: number): Promise<Problem> {\n    //return this.problem.find((problem) => problem.id ===id);\n  \t// for(let problem of this.problems){\n  \t//   if(problem.id === id){\n  \t//     return problem;\n  \t//   }\n  \t// }\n    return this.httpClient.get(`api/v1/problems/${id}`)\n      .toPromise()\n      .then((res: any) => res)  // same as ( return res)\n      .catch(this.handleError);\n  }\n\n  // add a new problem\n  addProblem(problem: Problem) {\n    // assign problem id\n    // problem.id = this.problems.length + 1;\n    // add to the end of problems list\n    // this.problems.push(problem);\n\n    // \"content-Type\" is case sensitive\n    const options = { headers: new HttpHeaders({'Content-Type': 'application/json'})};\n    return this.httpClient.post('api/v1/problems', problem, options)\n      .toPromise()\n      .then((res: any) => {\n        // any: type, \n        // update the _problemSource\n        this.getProblems();\n        return res;\n      })\n      .catch(this.handleError);\n  }\n\n  private handleError(error: any): Promise<any> {\n    return Promise.reject(error.body || error);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n\n"],"sourceRoot":""}